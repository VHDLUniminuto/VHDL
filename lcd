----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date:    15:50:35 09/14/2014 
-- Design Name: 
-- Module Name:    LCDinit - Behavioral 
-- Project Name: 
-- Target Devices: 
-- Tool versions: 
-- Description: 
--
-- Dependencies: 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity LCDinit is
    Port ( DataPort : out  STD_LOGIC_VECTOR (7 downto 0);
           EN : out  STD_LOGIC;
           RS : out  STD_LOGIC;
           clk : in  STD_LOGIC;
			  clkout: out STD_LOGIC;
			  Reset: in STD_LOGIC);
end LCDinit;

architecture Behavioral of LCDinit is
signal Act: STD_LOGIC;--Act activa el contador ó lo desactiva.
begin
process (clk, Reset)--clk es el reloj del la entidad LCD.
variable CicloLCD: integer range 0 to 50001; --Esta variable permite generar el ciclo de reloj.
variable CicloEN: integer range 0 to  5001; --R
variable Proceso:  integer range 0 to 14; --Cantidad de estados posibles para LCD.
constant Mensaje1 : String(1 to 23) := "Hola Mundo! Prueba VHDL";--Mensaje 1 para enviar a LCD.
--constant Mensaje2 : String(1 to 11) := "Prueba VHDL";--Mensaje 2 para enviar a LCD.
begin
--Este ciclo permite generar un reloj de 1ms
	if(clk='1' and clk'event) then
		if(Reset='1')then
		CicloLCD:=0;--Reiniciar variables
		Proceso:=0;
		Act<='0';
		end if;
		

		CicloLCD:=CicloLCD+1; --incremento de LCD

			-------------------Bloque de Reloj.----------------------------		
			if (CicloLCD>=50000) then
				Proceso:=Proceso+1; -- Los 5 primeros milisegundos permiten el "PowerUp" del LCD
				CicloLCD:=0;--Reiniciar variables
				end if;
				
				if (CicloLCD>=25000) then
			   clkout<='0';
				else
				clkout<='1';
			   end if;
				
				------------------------------------------------------------
				if(Proceso>=5)then
				Act<='1';
				else
				Act<='0';
				En<='0';
				DataPort<="00000000";
				end if;
		
			--Si proceso es mayor a 5 es decir 5ms envie comandos.
				
				if(Proceso>13)then
				Proceso:=14;
				end if;
				--Si proceso es mayor a 13

				if(Proceso>=10)then --Envio de caracteres
	            RS<='1';--Inicialización de RS modo caracter.
					else
					RS<='0';--Inicialización de RS Pin para modo comando.
					end if;

	if(Act='1') then
	case Proceso is
	when 5=>Dataport<="00111000";--Interfaz de 8 bits.
	when 6=>Dataport<="00001100";--Display on.
	when 7=>Dataport<="00000110";--Incremento de cursor.
	when 8=>Dataport<="00000001";--Borrar LCD.
	when 9=>Dataport<="00000010";--Return to home.
	when 10=>Dataport<=std_logic_vector(to_unsigned(character 'pos('h'),8));--Enviar caracteres a DisplayPort
	when 11=>Dataport<=std_logic_vector(to_unsigned(character'pos('o'),8));
	when 12=>Dataport<=std_logic_vector(to_unsigned(character'pos('l'),8));
	when 13=>Dataport<=std_logic_vector(to_unsigned(character'pos('a'),8));
	when 14=>Dataport<="00000000";--Restaurar valor de PORTLCD a 0's
   when others=>null;
   end case;
	if(Proceso<14)then
			if (CicloLCD>=25000) then
			   EN<='0';--Inicialización de pin Enable 
				else
				EN<='1';
				Act<='0'; 
			   end if;
				else
				RS<='0';--Inicialización de RS Pin para modo comando.
				EN<='0';--Inicialización de pin Enable 
	end if;
	end if;
	
	end if;
	end process;
	
	
end Behavioral;
